# Copyright (c) 2018-2022 The MobileCoin Foundation
#
# MobileCoin full-service: Deploy and run integration tests.

name: Development CD

env:
  CHART_REPO: https://harbor.mobilecoin.com/chartrepo/mobilecoinofficial-public
  DOCKER_ORG: mobilecoin
  MOBILECOIN_ENCLAVE_VERSION: v3.0.0

on:
  push:
    branches:
    - feature/*
  pull_request:
    branches:
    - main
    - release/*

concurrency:
  group: full-service-dev-cd-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # use simple version for all tags
  # use the same docker container for simple and mirror versions
  # use another metadata action to generate namespace names for the mirror version
  metadata:
    runs-on: [self-hosted, Linux, small]
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      docker_tag: ${{ steps.meta.outputs.docker_tag }}
      docker_org: ${{ env.DOCKER_ORG }}
      chart_repo: ${{ env.CHART_REPO }}
    steps:
    - name: Generate version metadata
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      id: meta
      with:
        action: generate-metadata
        prefix: fs

  build:
    strategy:
      matrix:
        network:
        - chain_id: test
        # - chain_id: main
    runs-on: [self-hosted, Linux, large-cd]
    container:
      image: mobilecoin/rust-sgx-base:v0.0.25
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache rust build binaries
      id: rust_artifact_cache
      uses: ./.github/actions/mobilecoin-cache-rust-binaries
      with:
        cache_buster: ${{ secrets.CACHE_BUSTER }}
        additional_keys: ${{ matrix.network.chain_id }}

    # Skip the following steps if we already have binaries.
    - name: Cache cargo packages
      if: "! steps.rust_artifact_cache.outputs.cache-hit"
      uses: ./.github/actions/mobilecoin-cache-cargo-package
      with:
        cache_buster: ${{ secrets.CACHE_BUSTER }}
        additional_keys: ${{ matrix.network.chain_id }}

    - name: Build all binaries
      if: "! steps.rust_artifact_cache.outputs.cache-hit"
      env:
        BUILD_OPTIONS: "--locked"
        CSS_JSON_FILE: production-${{ env.MOBILECOIN_ENCLAVE_VERSION }}.json
      run: |
        # Set git permissions
        git config --global --add safe.directory '*'
        tools/build-fs.sh ${{ matrix.network.chain_id }}

    - name: Copy artifacts to cache
      if: "! steps.rust_artifact_cache.outputs.cache-hit"
      run: |
        mkdir -p rust_build_artifacts/${{ matrix.network.chain_id }}
        find target/release -maxdepth 1 -executable -type f -exec cp "{}" rust_build_artifacts/${{ matrix.network.chain_id }} \;
        find target/release -maxdepth 1 -name "*.css" -exec cp "{}" rust_build_artifacts/${{ matrix.network.chain_id }} \;

  publish:
    strategy:
      matrix:
        network:
        - chain_id: test
          peer: mc://node1.test.mobilecoin.com/,mc://node2.test.mobilecoin.com/
          tx_source_url: https://s3-us-west-1.amazonaws.com/mobilecoin.chain/node1.test.mobilecoin.com/,https://s3-us-west-1.amazonaws.com/mobilecoin.chain/node2.test.mobilecoin.com/
        # - chain_id: main
        #   peer: mc://node1.prod.mobilecoinww.com/,mc://node2.prod.mobilecoinww.com/
        #   tx_source_url: https://ledger.mobilecoinww.com/node1.prod.mobilecoinww.com/,https://ledger.mobilecoinww.com/node2.prod.mobilecoinww.com/
    runs-on: [self-hosted, Linux, small]
    needs:
    - metadata
    - build
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache rust build binaries
      id: rust_artifact_cache
      uses: ./.github/actions/mobilecoin-cache-rust-binaries
      with:
        cache_buster: ${{ secrets.CACHE_BUSTER }}
        additional_keys: ${{ matrix.network.chain_id }}

    - name: Generate Docker Tags
      id: docker_meta
      uses: docker/metadata-action@v4
      with:
        flavor: |
          latest=false
          suffix=-${{ matrix.network.chain_id }}
        images: ${{ env.DOCKER_ORG }}/full-service
        tags: ${{ needs.metadata.outputs.docker_tag }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Publish to DockerHub
      uses: docker/build-push-action@v4
      with:
        build-args: |
          RUST_BIN_PATH=rust_build_artifacts/${{ matrix.network.chain_id }}
          MC_CHAIN_ID=${{ matrix.network.chain_id }}
          MC_PEER=${{ matrix.network.peer }}
          MC_TX_SOURCE_URL=${{ matrix.network.tx_source_url }}
        context: .
        file: .internal-ci/docker/Dockerfile.full-service
        labels: ${{ steps.docker_meta.outputs.labels }}
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}

    - name: Package and publish "full-service" chart
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: helm-publish
        chart_repo_username: ${{ secrets.HARBOR_USERNAME }}
        chart_repo_password: ${{ secrets.HARBOR_PASSWORD }}
        chart_repo: ${{ env.CHART_REPO }}
        chart_app_version: ${{ needs.metadata.outputs.tag }}-${{ matrix.network.chain_id }}
        chart_version: ${{ needs.metadata.outputs.tag }}-${{ matrix.network.chain_id }}
        chart_path: .internal-ci/helm/full-service

    - name: Package and publish "full-service-mirror" chart
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: helm-publish
        chart_repo_username: ${{ secrets.HARBOR_USERNAME }}
        chart_repo_password: ${{ secrets.HARBOR_PASSWORD }}
        chart_repo: ${{ env.CHART_REPO }}
        chart_app_version: ${{ needs.metadata.outputs.tag }}-${{ matrix.network.chain_id }}
        chart_version: ${{ needs.metadata.outputs.tag }}-${{ matrix.network.chain_id }}
        chart_path: .internal-ci/helm/full-service-mirror

  deploy:
    strategy:
      matrix:
        network:
        - chain_id: test
        # - chain_id: main
        chart:
        - full-service
        - full-service-mirror
    runs-on: [self-hosted, Linux, small]
    needs:
    - publish
    env:
      BASE_PATH: .tmp/
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Generate version metadata
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      id: meta
      with:
        action: generate-metadata
        prefix: ${{ matrix.chart }}-${{ matrix.network.chain_id }}

    - name: Create namespace
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: namespace-create
        namespace: ${{ steps.meta.outputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}

    - name: Generate secrets files
      run: |
        mkdir -p "${BASE_PATH}/secrets"
        echo -n "${{ secrets.MIRROR_PRIVATE_PEM }}" > "${BASE_PATH}/secrets/mirror-private.pem"

    - name: Create mirror-private secrets
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ steps.meta.outputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: private-client-msg-encryption
        src: "${{ env.BASE_PATH }}/secrets"

    - name: Generate full-service values file
      run: |
        mkdir -p "${BASE_PATH}"
        cat <<EOF > "${BASE_PATH}/values.yaml"
        fullService:
          persistence:
            enabled: false
        validator:
          persistence:
            enabled: false
        config:
          ledgerDbURL: https://mcdeveu1ledger.blob.core.windows.net/${{ matrix.network.chain_id }}/data.mdb
        EOF

    - name: Deploy chart
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: helm-deploy
        chart_repo: ${{ env.CHART_REPO }}
        chart_name: ${{ matrix.chart }}
        chart_version: ${{ steps.meta.outputs.tag }}-${{ matrix.network.chain_id }}
        chart_values: ${{ env.BASE_PATH }}/values.yaml
        release_name: ${{ matrix.chart }}
        namespace: ${{ steps.meta.outputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}

  # This will need to run on our self-hosted so it can connect to the privately deployed full-service.
  integration-test:
    strategy:
      matrix:
        network:
        - chain_id: test
          fog_report_url: fog://fog.test.mobilecoin.com
          wallet_secret: TEST_ACCOUNT_WALLET_JSON
          fog_authority_spki_var: TEST_FOG_AUTHORITY_SPKI
        # - chain_id: main
        #   fog_report_url: fog://fog.prod.mobilecoinww.com
        #   wallet_secret: MAIN_ACCOUNT_WALLET_JSON
        #   fog_authority_spki_var: MAIN_FOG_AUTHORITY_SPKI
        chart:
        - full-service
        - full-service-mirror
    runs-on: [self-hosted, Linux, small]
    needs:
    - deploy
    container:
      # image: mobilecoin/builder-install:v0.0.23
      image: python:3.11
    env:
      POETRY_HOME: /opt/poetry
      MC_WALLET_FILE: ${{ github.workspace }}/.tmp/wallet.json
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup wallet file
      run: |
        mkdir -p "$(dirname "${MC_WALLET_FILE}")"
        echo '${{ secrets[matrix.network.wallet_secret] }}' > "${MC_WALLET_FILE}"

    - name: Install Python Poetry env/package manager
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Test full-service
      env:
        MC_FULL_SERVICE_URL: http://full-service.${{ steps.meta.outputs.namespace }}:9090
        MC_FOG_REPORT_URL: ${{ matrix.network.fog_report_url }}
        MC_FOG_AUTHORITY_SPKI: ${{ env[matrix.network.fog_authority_spki_var] }}
      shell: bash
      run: |
        # Set git permissions
        git config --global --add safe.directory '*'

        # Switch to testing directory and install dependencies.
        pushd python || exit 1
        "${POETRY_HOME}/bin/poetry" install

        # Run tests.
        "${POETRY_HOME}/bin/poetry" run pytest -v
        popd || exit 0

    # insert steps for full-service-mirror testing


  # remove the testing environment after all tests are run successfully when this
  #  is triggered from a PR.  For a feature branch, see dev-delete-cd.yaml
  cleanup-after-run:
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        network:
        - chain_id: test
        # - chain_id: main
        chart:
        - full-service
        - full-service-mirror
    runs-on: [self-hosted, Linux, small]
    needs:
    - integration-test
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Generate version metadata
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      id: meta
      with:
        action: generate-metadata
        prefix: ${{ matrix.chart }}-${{ matrix.network.chain_id }}

    - name: Delete namespace
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: namespace-delete
        namespace: ${{ steps.meta.outputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
