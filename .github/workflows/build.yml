name: build

env:
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

# only perform these build steps on pre-release
on:
  push:
    tags:
      - 'v*-pre.*'
      - '*-force-build*'

jobs:
  macos-x64:
    runs-on: [self-hosted, macOS, X64]
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet
            
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Brew Bundle
        run: |
          brew bundle
      
      - name: Git Submodule
        run: |
          git submodule update --checkout --init --recursive

      # CACHE_VERSION secret is 'date --iso-8601=minutes' and is used to invalidate cache if needed
      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v3
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-x86-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          export PATH="/usr/local/opt/openssl@3/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/openssl@3/lib"
          export CPPFLAGS="-I/usr/local/opt/openssl@3/include"
          export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"
          cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -pv build_artifacts/${{ matrix.network }}/bin
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp target/release/full-service build_artifacts/${{ matrix.network }}/bin/
          cp target/release/transaction-signer build_artifacts/${{ matrix.network }}/bin/

      - name: Create Artifact
        run: |
          mkdir -pv artifact
          cd artifact && tar -czvf ${{ github.sha }}-${{ runner.os }}-x86-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-service_${{ runner.os }}_${{ matrix.network }}_x86
          path: artifact/${{ github.sha }}-${{ runner.os }}-x86-${{ matrix.network }}.tar.gz

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -pv release
          cd release && tar -czvf ${{ github.ref_name }}-${{ runner.os }}-x86-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            release/${{ github.ref_name }}-${{ runner.os }}-x86-${{ matrix.network }}.tar.gz

  macos-arm64:
    runs-on: [self-hosted, macOS, ARM64]
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet
            
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Brew Bundle
        run: |
          brew bundle
      
      - name: Git Submodule
        run: |
          git submodule update --checkout --init --recursive

      # CACHE_VERSION secret is 'date --iso-8601=minutes' and is used to invalidate cache if needed
      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v3
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-arm64-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"
          export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"
          cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -pv build_artifacts/${{ matrix.network }}/bin
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp target/release/full-service build_artifacts/${{ matrix.network }}/bin/
          cp target/release/transaction-signer build_artifacts/${{ matrix.network }}/bin/

      - name: Create Artifact
        run: |
          mkdir -pv artifact
          cd artifact && tar -czvf ${{ github.sha }}-${{ runner.os }}-arm64-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-service_${{ runner.os }}_${{ matrix.network }}_arm64
          path: artifact/${{ github.sha }}-${{ runner.os }}-arm64-${{ matrix.network }}.tar.gz

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -pv release
          cd release && tar -czvf ${{ github.ref_name }}-${{ runner.os }}-arm64-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            release/${{ github.ref_name }}-${{ runner.os }}-arm64-${{ matrix.network }}.tar.gz

  linux:
    runs-on: [self-hosted, Linux, large]
    permissions:
      contents: write
    container:
      image: mobilecoin/rust-sgx-base:latest
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # CACHE_VERSION secret is 'date --iso-8601=minutes' and is used to invalidate cache if needed
      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v3
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -pv build_artifacts/${{ matrix.network }}/bin
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp target/release/full-service build_artifacts/${{ matrix.network }}/bin/
          cp target/release/transaction-signer build_artifacts/${{ matrix.network }}/bin/

      - name: Create Artifact
        run: |
          mkdir -pv artifact
          cd artifact && tar -czvf ${{ github.sha }}-${{ runner.os }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-service_${{ runner.os }}_${{ matrix.network }}
          path: artifact/${{ github.sha }}-${{ runner.os }}-${{ matrix.network }}.tar.gz

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -pv release
          cd release && tar -czvf ${{ github.ref_name }}-${{ runner.os }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            release/${{ github.ref_name }}-${{ runner.os }}-${{ matrix.network }}.tar.gz
