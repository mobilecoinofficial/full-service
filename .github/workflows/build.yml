name: fs-build

env:
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

on:
  push:
    branches:
      - 'develop'
      - 'feature/*'
      - 'hotfix/*'
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: [self-hosted, Linux, large]
    # Needs write permission for publishing release
    permissions:
      contents: write
    container:
      image: mobilecoin/rust-sgx-base:0.0.4
    outputs:
      prerelease: ${{ steps.prerelease.outputs.value }}
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # CACHE_VERSION secret is 'date --iso-8601=minutes' and is used to invalidate cache if needed
      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v2
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Cache Cargo
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        id: cargo_cache
        uses: actions/cache@v2
        with:
          path: |
            /opt/cargo/git
            /opt/cargo/registry/index
            /opt/cargo/registry/cache
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -pv build_artifacts/${{ matrix.network }}/bin
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp target/release/full-service build_artifacts/${{ matrix.network }}/bin/

      # Create and Upload an Artifact on Push and Not a Tag
      - name: Create Artifact
        run: |
          mkdir -pv artifact
          cd artifact && tar -czvf ${{ github.sha }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-service_${{ matrix.network }}
          path: artifact/${{ github.sha }}-${{ matrix.network }}.tar.gz

      # Does the tag have the "pre" key word in it? Will mark it as prerelease
      - name: Is Prerelease
        shell: bash
        id: prerelease
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          if [[ "${GITHUB_REF}" =~ pre ]]; then
            echo "::set-output name=value::true"
          else
            echo "::set-output name=value::false"
          fi

      # Only for Tag on Main
      - name: Get Current Pre-Release
        if: startsWith(github.ref, 'refs/tags/v') && steps.prerelease.outputs.value == 'false'
        id: current_release
        uses: joutvhu/get-release@v1
        with:
          debug: true
          latest: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Only for Tag on Main
      - name: Download Latest Pre-Release
        if: startsWith(github.ref, 'refs/tags/v') && steps.prerelease.outputs.value == 'false'
        uses: duhow/download-github-release-assets@v1
        with:
          tag: ${{ steps.current_release.outputs.tag_name }}
          files: |
            ${{ steps.current_release.outputs.tag_name }}-${{ matrix.network }}.tar.gz
          target: /var/tmp/${{ steps.current_release.outputs.tag_name }}-${{ matrix.network }}.tar.gz

      # Only for Tag on Main
      - name: Extract Release
        if: startsWith(github.ref, 'refs/tags/v') && steps.prerelease.outputs.value == 'false'
        run: |
          rm -rfv build_artifacts/${{ matrix.network }}
          mkdir -pv build_artifacts/${{ matrix.network }}
          tar xzvf /var/tmp/${{ steps.current_release.outputs.tag_name }}-${{ matrix.network }}.tar.gz -C build_artifacts/${{ matrix.network }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -pv release
          cd release && tar -czvf ${{ github.ref_name }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Generate MD5
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd release && md5sum ${{ github.ref_name }}-${{ matrix.network }}.tar.gz > ${{ github.ref_name }}-${{ matrix.network }}.md5

      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.prerelease.outputs.value }}
          files: |
            release/${{ github.ref_name }}-${{ matrix.network }}.tar.gz
            release/${{ github.ref_name }}-${{ matrix.network }}.md5

  # docker:
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: ubuntu-latest
  #   needs: build
  #   outputs:
  #     prerelease: ${{ needs.build.outputs.prerelease }}
  #     dockerhub_repo: ${{ env.DOCKERHUB_REPO }}
  #   strategy:
  #     matrix:
  #       include:
  #         - namespace: test
  #           network: testnet
  #         - namespace: prod
  #           network: mainnet

  #   steps:
  #     - name: Checkout with submodules
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - name: Cache Build Binaries
  #       id: artifact_cache
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           build_artifacts
  #         key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

  #     # Caching seems to not work when you push a tag (I think because of scope) so download the just uploaded release
  #     # See issue here: https://github.com/actions/cache/issues/556
  #     - name: Download Release on Cache Miss
  #       if: steps.artifact_cache.outputs.cache-hit != 'true'
  #       uses: duhow/download-github-release-assets@v1
  #       with:
  #         tag: ${{ github.ref_name }}
  #         files: |
  #           ${{ github.ref_name }}-${{ matrix.network }}.tar.gz
  #         target: /var/tmp/${{ github.ref_name }}-${{ matrix.network }}.tar.gz

  #     - name: Extract Release
  #       if: steps.artifact_cache.outputs.cache-hit != 'true'
  #       run: |
  #         mkdir -pv build_artifacts/${{ matrix.network }}
  #         tar xzvf /var/tmp/${{ github.ref_name }}-${{ matrix.network }}.tar.gz -C build_artifacts/${{ matrix.network }}

  #     - name: Generate Docker Tags
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.DOCKERHUB_REPO }}
  #         flavor: |
  #           latest=false
  #           suffix=-${{ matrix.network }}
  #         tags: |
  #           type=semver,pattern={{raw}},priority=20
  #           type=sha,priority=10

  #     - name: Setup Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         install: true

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Publish to DockerHub
  #       id: docker_publish_dockerhub
  #       uses: docker/build-push-action@v2
  #       with:
  #         build-args: |
  #           NETWORK=${{ matrix.network }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         context: .
  #         file: Dockerfile.ci
  #         push: true
  #         labels: ${{ steps.meta.outputs.labels }}
  #         tags: ${{ steps.meta.outputs.tags }}

  # deploy:
  #   needs: [docker]
  #   uses: ./.github/workflows/deploy.yaml
  #   with:
  #     prerelease: ${{ needs.docker.outputs.prerelease }}
  #     dockerhub_repo: ${{ needs.docker.outputs.dockerhub_repo }}
  #   secrets:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     STAGING_CLUSTER: ${{ secrets.STAGING_CLUSTER }}
  #     PRODUCTION_CLUSTER: ${{ secrets.PRODUCTION_CLUSTER }}
  #     TESTNET_VALUES: ${{ secrets.TESTNET_VALUES }}
  #     MAINNET_VALUES: ${{ secrets.MAINNET_VALUES }}
