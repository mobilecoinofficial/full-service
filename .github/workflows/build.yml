name: fs-build

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'develop'
      - 'feature/*'
      - 'hotfix/*'

defaults:
  builder-install: &builder-install gcr.io/mobilenode-211420/builder-install:1_25
  default-xcode-version: &default-xcode-version "12.0.0"

  default-environment: &default-environment
    # sccache config
    SCCACHE_IDLE_TIMEOUT: "1200"
    SCCACHE_CACHE_SIZE: 1G
    SCCACHE_ERROR_LOG: /tmp/sccache.log

  default-build-environment: &default-build-environment
    <<: *default-environment
    IAS_MODE: DEV
    SGX_MODE: SW
    RUST_BACKTRACE: "1"
    SKIP_SLOW_TESTS: "1"

executors:
  build-executor:
    docker:
      - image: *builder-install
    resource_class: xlarge

  macos:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
      HOMEBREW_BUNDLE_NO_LOCK: "1"

commands:
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: |
            rustc --version
            cargo --version
            rustup --version
            sccache --version
            command -v jq >/dev/null && jq --version || true

  rust_version_check:
    description: Rust Version Check
    steps:
      - run:
          name: Rust Version Check
          # Check if our rust-toolchain is the same as mobilecoin/docker/rust-toolchain
          # They might be out of sync if mobilecoin got uprev'ed but we did not
          command: |
            cmp -l rust-toolchain mobilecoin/docker/rust-toolchain

  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Configure Cargo to use git cli
          command: |
            mkdir -p ~/.cargo
            echo '[net]' >> ~/.cargo/config
            echo 'git-fetch-with-cli = true' >> ~/.cargo/config

            if [ -f ~/.gitconfig ]; then
              sed -i -e 's/github/git-non-exist-hub/g' ~/.gitconfig # https://github.com/rust-lang/cargo/issues/3900
            fi
      - run:
          name: Set utility environment variables
          command: |
            HOST_TARGET_TRIPLE="$(rustc -Vv | sed -n 's/^host: //p')"
            echo "export HOST_TARGET_TRIPLE=\"$HOST_TARGET_TRIPLE\"" >> $BASH_ENV
            echo "Setting HOST_TARGET_TRIPLE to $HOST_TARGET_TRIPLE"

  git_submodule:
    steps:
      - run:
          name: Checking out git submodules
          command: |
            git submodule update --checkout --init --recursive

  enable_sccache:
    description: Enabling sccache
    steps:
      - run:
          name: Enable sccache
          command: |
            echo 'export RUSTC_WRAPPER=sccache' >> $BASH_ENV
            echo 'export CMAKE_C_COMPILER_LAUNCHER=sccache' >> $BASH_ENV
            echo 'export CMAKE_CXX_COMPILER_LAUNCHER=sccache' >> $BASH_ENV

            # Sccache doesn't support incremental building
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV

            # Set cache dir explicitly so that all platforms use the same location
            echo 'export SCCACHE_DIR=$HOME/.cache/sccache' >> $BASH_ENV

  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: v0-sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}.

  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}.{{ .Revision }}
          paths:
            - ~/.cache/sccache

  record-sccache-cache-stats:
    steps:
      - run:
          name: Print sccache statistics
          command: sccache --show-stats
      - store_artifacts:
          path: /tmp/sccache.log
          destination: logs/sccache.log

  restore-cargo-cache:
    steps:
      - restore_cache:
          name: Restore Cargo cache
          key: v0-cargo-{{ arch }}

  save-cargo-cache:
    steps:
      - run:
          name: Prepare Cargo cache for saving
          command: |
            set -x

            command -v cargo-install-update >/dev/null || cargo install cargo-update
            command -v cargo-trim >/dev/null || cargo install cargo-trim

            cargo install-update --all

            # Configure cargo-trim with the project's Cargo.lock files
            mkdir -p ~/.config
            cargo trim --directory "$(pwd)"
            cargo trim --directory "$(pwd)/mobilecoin/consensus/enclave/trusted"

            # Clean dependencies not in the Cargo.lock
            time cargo trim --orphan-clean

            # Make sure all dependencies are downloaded, since there appears to be
            # a bug where cargo trim erroneously removes certain git repos.
            time cargo fetch --locked
            (cd mobilecoin/consensus/enclave/trusted && time cargo fetch --locked)

            # Remove the registry src dir since it's the largest dir and it's
            # recreatable from the archives in ~/.cargo/cache
            time cargo trim --wipe src

            # Run git compress on cached repos
            time cargo trim --gc all

            # Display Cargo cache stats
            cargo trim --query

            # Uninstall binary cargo crates that don't need to be cached
            time cargo uninstall cargo-trim cargo-update
      - save_cache:
          name: Save Cargo cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-cargo-{{ arch }}-{{ .Revision }}
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          paths:
            - ~/.cargo/.crates.toml
            - ~/.cargo/bin
            - ~/.cargo/git/checkout
            - ~/.cargo/git/db
            - ~/.cargo/registry/cache
            - ~/.cargo/registry/index
      - record-cargo-cache-stats

  record-cargo-cache-stats:
    steps:
      - run:
          name: Print Cargo cache statistics
          command: |
            cargo cache
            cargo cache local

  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            command -v rustup >/dev/null || \
              curl https://sh.rustup.rs --tlsv1.2 -sSf | sh -s -- -y --default-toolchain none
            # Installs the toolchain specified in `rust-toolchain`
            "$HOME/.cargo/bin/rustup" show active-toolchain

  install-ci-deps:
    steps:
      - run:
          name: Install CI dependencies
          command: |
            command -v sccache >/dev/null || rustup run --install stable cargo install sccache
            command -v cargo-cache >/dev/null || rustup run --install stable cargo install cargo-cache
            command -v cargo2junit >/dev/null || rustup run --install stable cargo install cargo2junit

  prefetch-cargo-deps:
    steps:
      - run:
          name: Fetch project Cargo dependencies
          command: |
            set -x
            time cargo fetch --locked
            (cd mobilecoin/consensus/enclave/trusted && time cargo fetch --locked)

  restore-homebrew-cache:
    steps:
      - restore_cache:
          name: Restore Homebrew cache
          key: v0-homebrew-{{ arch }}
      - run:
          name: Update Homebrew
          command: |
            brew --version
            brew update --preinstall
            brew --version
      - run:
          name: Install Homebrew dependencies
          command: |
            rm "/usr/local/lib/python3.8/site-packages/six.py"
            brew bundle --no-upgrade

  save-homebrew-cache:
    steps:
      - run:
          name: Prepare Homebrew cache for saving
          command: |
            # Make sure latest versions are installed
            time brew bundle

            # Remove all dependencies except those in the Brewfile
            time brew bundle cleanup --force

            brew info
      - save_cache:
          name: Save Homebrew cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-homebrew-{{ arch }}-{{ .Revision }}
          paths:
            - /usr/local/Cellar

  download-css-files:
    steps:
      - name: Consensus SigStruct
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})


  prepare-for-build:
    parameters:
      os: { type: enum, enum: ["linux", "macos", "windows"], default: linux }
    steps:
      - checkout
      - git_submodule
      - rust_version_check
      - when:
          condition: { equal: [ << parameters.os >>, macos ] }
          steps: [ restore-homebrew-cache ]
      - install-rust
      - restore-cargo-cache
      - env_setup
      - download-css-files
      - install-ci-deps
      - print_versions
      # Cache is only saved when building from develop. We don't restore sccache on
      # develop so that the cache is clean when saved.
      - unless:
          condition: { equal: [ << pipeline.git.branch >>, develop ] }
          steps: [ restore-sccache-cache ]
      - enable_sccache
      - prefetch-cargo-deps

  # A job that runs `cargo check` in a given directory, with optional cargo arguments
  cargo-check:
    parameters:
      extra_args:
        type: string
        default: ""
    steps:
      - run:
          name: cargo check << parameters.extra_args >>
          command: |
            cargo check --frozen --target "$HOST_TARGET_TRIPLE" << parameters.extra_args >>

  post-build:
    steps:
      - record-sccache-cache-stats

  check-dirty-git:
    steps:
      - run:
          name: Checking dirty git
          command: |
            if [[ -n $(git status --porcelain) ]]; then
              echo "repo is dirty"
              git status
              exit 1
            fi

jobs:
  # Build using macOS
  build-macos:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
    executor:
      name: macos
      xcode-version: << parameters.xcode-version >>
    environment:
      <<: *default-build-environment
      SCCACHE_CACHE_SIZE: 450M
      RUSTFLAGS: -D warnings -C target-cpu=penryn
      CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
      INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet
    steps:
      - prepare-for-build:
          os: macos
      - run:
          name: Cargo build
          command: |
            cargo build --release
      - check-dirty-git
      - when:
          condition: { equal: [ << pipeline.git.branch >>, develop ] }
          steps: [ save-sccache-cache, save-cargo-cache, save-homebrew-cache ]
      - post-build
